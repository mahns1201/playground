package datastructure.list;import java.util.Arrays;public class MyArrayList<E> implements MyList<E> {    private static final int DEFAULT_CAPACITY = 10;    private Object[] nodes;    private int size;    public MyArrayList() {        this(DEFAULT_CAPACITY);    }    public MyArrayList(int capacity) {        nodes = new Object[capacity];    }    @Override    public void add(E e) {        grow();        if (size == nodes.length) {            grow();        }        nodes[size] = e;        size++;    }    private void grow() {        if (size == nodes.length) {            nodes = Arrays.copyOf(nodes, nodes.length * 2);        }    }    @Override    public void add(E e, int idx) {        grow();        shiftRightFrom(idx);        nodes[idx] = e;        size++;    }    private void shiftRightFrom(int idx) {        for (int i = size; i > idx; i--) {            nodes[i] = nodes[i - 1];        }    }    @Override    public void printAll() {        StringBuilder sb = new StringBuilder();        sb.append(nodes[0]);        for (int i = 1; i < size; i++) {            sb.append(" -> ");            sb.append(nodes[i]);        }        System.out.print("Print all elements: [");        System.out.println(sb + "]");    }    @Override    public int indexOf(E e) {        for (int i = 0; i < size; i++) {            if (e.equals(nodes[i])) {                return i;            }        }        return -1;    }    @Override    public E set(E e, int idx) {        E oldElement = get(idx);        nodes[idx] = e;        return oldElement;    }    @Override    public E get(int idx) {        return (E) nodes[idx]; // 다운캐스팅이 강제되지만, 들어갈 때 체크가 되므로 타입은 보장된다.    }    @Override    public E remove(int idx) {        E result = get(idx);        shiftLeftFrom(idx);        nodes[size - 1] = null;        size--;        return result;    }    private void shiftLeftFrom(int idx) {        for (int i = idx; i < size - 1; i++) {            nodes[i] = nodes[i + 1];        }    }    @Override    public String toString() {        return Arrays.toString(Arrays.copyOf(nodes, size)) + " size=" + size + ", capacity=" + nodes.length;    }}