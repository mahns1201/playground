package datastructure.list;public class MyLinkedList<E> implements MyList<E> {    private Node<E> first;    private int size;    @Override    public void add(E e) {        Node<E> newNode = new Node<>(e);        if (first == null) {            first = newNode;        } else {            Node<E> lastNode = getLastNode();            lastNode.next = newNode;        }        size++;    }    private Node<E> getLastNode() {        Node<E> lastNode = first;        while (lastNode.next != null) {            lastNode = lastNode.next;        }        return lastNode;    }    @Override    public void add(E e, int idx) {        Node<E> newNode = new Node<>(e);//        // 직접 작성//        Node<E> beforeNode = null;//        Node<E> currentNode = first;////        for (int i = 0; i < idx; i++) {//            beforeNode = currentNode;//            currentNode = currentNode.next;//        }////        if (beforeNode != null) {//            beforeNode.next = newNode;//        } else {//            first = newNode;//        }////        newNode.next = currentNode;        if (idx == 0) {            newNode.next = first;            first = newNode;        } else {            Node<E> prevNode = getNode(idx - 1);            newNode.next = prevNode.next;            prevNode.next = newNode;        }        size++;    }    @Override    public void printAll() {        Node<E> node = first;        while (node != null) {            System.out.println(node.element);            node = node.next;        }    }    @Override    public E set(E e, int idx) {        Node<E> node = getNode(idx);        E oldElement = node.element;        node.element = e;        return oldElement;    }    @Override    public E get(int idx) {        Node<E> node = getNode(idx);        return node.element;    }    private Node<E> getNode(int idx) {        Node<E> node = first;        for (int i = 0; i < idx; i++) {            node = node.next;        }        return node;    }    @Override    public int indexOf(E e) {        for (int i = 0; i < size; i++) {            Node<E> node = getNode(i);            if (e.equals(node.element)) {                return i;            }        }        return -1;    }    @Override    public E remove(int idx) {        Node<E> removedNode = getNode(idx);        E removedElement = removedNode.element;        if (idx == 0) {            first = removedNode.next;        } else {            Node<E> prevNode = getNode(idx - 1);            prevNode.next = removedNode.next;        }        removedNode.element = null;        removedNode.next = null;        size--;        return removedElement;    }    @Override    public String toString() {        return "[" + first + "] size: " + size;    }    private static class Node<E> {        private E element;        private Node<E> next;        public Node(E e) {            element = e;        }        @Override        public String toString() {            StringBuilder sb = new StringBuilder();            Node<E> node = this;            while (node != null) {                sb.append(node.element);                if (node.next != null) {                    sb.append(" -> ");                }                node = node.next;            }            return sb.toString();        }    }}